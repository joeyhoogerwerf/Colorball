package{	import flash.display.Sprite;	import flash.display.Bitmap;		public class Stage extends Sprite	{		private var _newStageDetails:StageDetails;		private var _newStar:Star;		private var _stageNr:int;		private var _stageName:String;		private var _mainColor:uint;				private var _newLineArray = new Array();		private var _newLineCornerArray = new Array();		private var _newFlagRectangleArray = new Array();		private var _newMovableBallArray = new Array();				private var _newLiveGhostBallArray2:Array = new Array();		private var _newLiveGhostBallArray:Array =  new Array();		private var _ghostLength:int = 2;		private var _newPermGhostBallArray:Array =  new Array();				private var _dummySprite:Sprite = new Sprite();				private var _counter:int;				[Embed(source = "img/eyecandy.png")] private var Eyecandy:Class; private var _newEyecandy:Bitmap = new Eyecandy();		[Embed(source = "img/woodBlue.png")] private var WoodBG:Class; private var _WoodBG:Bitmap = new WoodBG();		public function Stage(stageNr:int, stageWidth:int, stageHeight:int)		{			this._stageNr = stageNr;						var stageSetup:Array = StageSetup.returnStageSetup(stageNr, stageWidth, stageHeight);						this._mainColor = stageSetup[5];						executeStageBuilder(stageSetup);						this._newStageDetails = new StageDetails(stageNr, stageSetup[3], stageWidth, stageSetup[5]);			this._newStar = new Star(stageWidth, stageSetup[5]);						addChild(this._newStageDetails);			addChild(this._newStar);						initLiveGhostBallArray();		}				private function executeStageBuilder(stageSetup:Array):void		{			var newBackground = new Background(stageSetup[4][this._stageNr][0][0],		//stageWidth											   stageSetup[4][this._stageNr][0][1],		//stageHeight											   stageSetup[4][this._stageNr][0][2],		//topColor											   stageSetup[4][this._stageNr][0][3]);		//bottomColor						addChild(newBackground);						addChild(this._newEyecandy); this._newEyecandy.x += 60; this._newEyecandy.y -= 60; this._newEyecandy.alpha = 0.5			addChild(this._WoodBG); this._WoodBG.x -= 0; this._WoodBG.y -= 0;						//ADD ALL LINES TO STAGE			for(var i:int = 0; i < stageSetup[0][this._stageNr].length; i++)			{				var newLine:Line = new Line(stageSetup[0][this._stageNr][i][0],		//xPosStart											stageSetup[0][this._stageNr][i][1],		//yPosStart											stageSetup[0][this._stageNr][i][2],		//xPosEnd											stageSetup[0][this._stageNr][i][3],		//yPosEnd											stageSetup[0][this._stageNr][i][4]);	//color								this._newLineArray.push(newLine);								addChild(newLine);			}						//ADD ALL LINE-CORNERS TO STAGE			for(var lC:int = 0; lC < stageSetup[6][this._stageNr].length; lC++)			{				var newLineCorner:LineCorner = new LineCorner(stageSetup[6][this._stageNr][lC][0],	//xPos															  stageSetup[6][this._stageNr][lC][1],	//yPos															  stageSetup[6][this._stageNr][lC][2],	//widthSquare															  stageSetup[6][this._stageNr][lC][3]);	//color								this._newLineCornerArray.push(newLineCorner);								addChild(newLineCorner);			}						//ADD ALL FLAG RECTANGLES TO STAGE			for(var j:int = 0; j < stageSetup[1][this._stageNr].length; j++)			{				var newFlagRectangle = new FlagRectangle(stageSetup[1][this._stageNr][j][0],	//xPos												  	   	 stageSetup[1][this._stageNr][j][1],	//yPos												         stageSetup[1][this._stageNr][j][2],	//widthRectangle												         stageSetup[1][this._stageNr][j][3],	//heightRectangle												         stageSetup[1][this._stageNr][j][4]);	//color								this._newFlagRectangleArray.push(newFlagRectangle);								addChild(newFlagRectangle);			}						//ADD ALL MOVABLE BALLS TO STAGE			for(var k:int = 0; k < stageSetup[2][this._stageNr].length; k++)			{				var newMovableBall = new movableBall(stageSetup[2][this._stageNr][k][0],	//xPos												  	 stageSetup[2][this._stageNr][k][1],	//yPos												     stageSetup[2][this._stageNr][k][2],	//radius													 stageSetup[2][this._stageNr][k][3],	//color													 stageSetup[2][this._stageNr][k][4],	//lineWidth													 stageSetup[2][this._stageNr][k][5],	//keyCodeRight												     stageSetup[2][this._stageNr][k][6]);	//keyCodeLeft								this._newMovableBallArray.push(newMovableBall);								addChild(newMovableBall);			}		}				private function initLiveGhostBallArray():void		{			this._newLiveGhostBallArray[0] = new Array(); //mov balls			this._newLiveGhostBallArray[1] = new Array(); //ghosts						for(var q:int = 0; q < this._newMovableBallArray.length; q++)			{				this._newLiveGhostBallArray[0][q] = this._newMovableBallArray[q];				this._newLiveGhostBallArray[1][q] = new Array();			}		}				public function printGhost(printType:String):void		{			for(var g:int = 0; g < this._newLiveGhostBallArray[0].length; g++)			{				//trace("length movarr: " + this._newMovableBallArray.length);								if(printType == "live")				{					var newLiveGhostBall = new Ball(this._newLiveGhostBallArray[0][g].x, this._newLiveGhostBallArray[0][g].y, 3, this._newMovableBallArray[g].color, 1);									newLiveGhostBall.alpha = 1;									addChild(newLiveGhostBall);									this._newLiveGhostBallArray[1][g].unshift(newLiveGhostBall);									if(this._newLiveGhostBallArray[1][g].length > this._stageNr)					{							removeChild(this._newLiveGhostBallArray[1][g][this._stageNr]);						this._newLiveGhostBallArray[1][g].pop();					}				}								if(printType == "permanent")				{					var newPermGhostBall = new Ball(this._newMovableBallArray[g].x, this._newMovableBallArray[g].y, this._newMovableBallArray[g].radius, (Math.random() * 0xFFFFFF)/*this._newLiveGhostBallArray[0][g].color*/, 2);									newPermGhostBall.alpha = 0.25;					newPermGhostBall.setInnerOpacity(0);									addChild(newPermGhostBall);				}			}		}				public function get newLineArray():Array		{			return this._newLineArray;		}				public function get newLineCornerArray():Array		{			return this._newLineCornerArray;		}				public function get newFlagRectangleArray():Array		{			return this._newFlagRectangleArray;		}				public function get newMovableBallArray():Array		{			return this._newMovableBallArray;		}				public function get mainColor():uint		{			return this._mainColor;		}	}	}